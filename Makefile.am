### GENERATED BY scripts/makemake.py - DO NOT EDIT

ACLOCAL_AMFLAGS = -I m4

AM_CPPFLAGS = \
    -I$(top_srcdir) \
    -I$(top_srcdir)/src \
    $(CODE_COVERAGE_CPPFLAGS)

AM_CFLAGS = $(CODE_COVERAGE_CFLAGS)

if BUILD_LINUX
AM_CPPFLAGS += -DLINUX
endif
if BUILD_WINDOWS
AM_CPPFLAGS += -DWINDOWS
endif
if BUILD_APPLE
AM_CPPFLAGS += -DAPPLE
endif

AM_LDFLAGS = -pthread

CMOCK_CPPFLAGS = \
    -I$(top_srcdir)/third-party/CMock/vendor/unity/src \
    -I$(top_srcdir)/third-party/CMock/src \
    -Itests/mocks

bin_PROGRAMS =
noinst_LTLIBRARIES =
check_PROGRAMS =
check_LTLIBRARIES =
CLEANFILES =
BUILT_SOURCES =

check_LTLIBRARIES += libcmock.la
libcmock_la_SOURCES = \
    third-party/CMock/src/cmock.c \
    third-party/CMock/src/cmock.h \
    third-party/CMock/src/cmock_internals.h \
    third-party/CMock/vendor/unity/src/unity.c \
    third-party/CMock/vendor/unity/src/unity.h \
    third-party/CMock/vendor/unity/src/unity_internals.h
libcmock_la_CPPFLAGS = $(CMOCK_CPPFLAGS)

CLEANFILES += tests/runners/runner_test_*.c


### datastruct

noinst_LTLIBRARIES += libdatastruct.la

libdatastruct_la_SOURCES = \
    ./src/datastruct/mem.h \
    ./src/datastruct/memtbl.h \
    ./src/datastruct/map.c \
    ./src/datastruct/memtbl.c \
    ./src/datastruct/mem.c \
    ./src/datastruct/datastruct.h \
    ./src/datastruct/map.h \
    ./src/datastruct/str.h \
    ./src/datastruct/str.c

libdatastruct_la_LIBADD =

tests/mocks/mock_datastruct.c tests/mocks/mock_datastruct.h: ./src/datastruct/datastruct.h
	@test -n "$(RUBY)" || { echo "\nPlease install Ruby to run tests.\n"; exit 1; }
	mkdir -p tests/mocks
	CMOCK_DIR=$(top_srcdir)/third-party/CMock \
	MOCK_OUT=tests/mocks \
	$(RUBY) $(top_srcdir)/third-party/CMock/scripts/create_mock.rb $<

check_LTLIBRARIES += libdatastruct_mock.la

nodist_libdatastruct_mock_la_SOURCES = tests/mocks/mock_datastruct.c

libdatastruct_mock_la_CPPFLAGS = \
    $(CMOCK_CPPFLAGS) \
    $(AM_CPPFLAGS) \
    -I$(top_srcdir)/src/datastruct

libdatastruct_mock_la_LIBADD = libcmock.la

CLEANFILES += \
    tests/mocks/mock_datastruct.c \
    tests/mocks/mock_datastruct.h

check_PROGRAMS += tests/runners/test_map

tests/runners/runner_test_map.c: ./tests/datastruct/test_map.c
	@test -n "$(RUBY)" || { echo "\nPlease install Ruby to run tests.\n"; exit 1; }
	mkdir -p tests/runners
	$(RUBY) $(top_srcdir)/third-party/CMock/vendor/unity/auto/generate_test_runner.rb $< $@

tests_runners_test_map_SOURCES = \
    tests/datastruct/test_map.c \
    src/datastruct/datastruct.h

nodist_tests_runners_test_map_SOURCES = tests/runners/runner_test_map.c

tests/datastruct/runners_test_map-test_map.$(OBJEXT): \
    tests/runners/runner_test_map.c \
    libcmock.la \
    libdatastruct.la

CLEANFILES += tests/runners/runner_test_map.c

tests_runners_test_map_LDADD = \
    libcmock.la \
    libdatastruct.la

tests_runners_test_map_CPPFLAGS = \
    $(CMOCK_CPPFLAGS) \
    $(AM_CPPFLAGS)

check_PROGRAMS += tests/runners/test_memtbl

tests/runners/runner_test_memtbl.c: ./tests/datastruct/test_memtbl.c
	@test -n "$(RUBY)" || { echo "\nPlease install Ruby to run tests.\n"; exit 1; }
	mkdir -p tests/runners
	$(RUBY) $(top_srcdir)/third-party/CMock/vendor/unity/auto/generate_test_runner.rb $< $@

tests_runners_test_memtbl_SOURCES = \
    tests/datastruct/test_memtbl.c \
    src/datastruct/datastruct.h

nodist_tests_runners_test_memtbl_SOURCES = tests/runners/runner_test_memtbl.c

tests/datastruct/runners_test_memtbl-test_memtbl.$(OBJEXT): \
    tests/runners/runner_test_memtbl.c \
    libcmock.la \
    libdatastruct.la

CLEANFILES += tests/runners/runner_test_memtbl.c

tests_runners_test_memtbl_LDADD = \
    libcmock.la \
    libdatastruct.la

tests_runners_test_memtbl_CPPFLAGS = \
    $(CMOCK_CPPFLAGS) \
    $(AM_CPPFLAGS)

check_PROGRAMS += tests/runners/test_str

tests/runners/runner_test_str.c: ./tests/datastruct/test_str.c
	@test -n "$(RUBY)" || { echo "\nPlease install Ruby to run tests.\n"; exit 1; }
	mkdir -p tests/runners
	$(RUBY) $(top_srcdir)/third-party/CMock/vendor/unity/auto/generate_test_runner.rb $< $@

tests_runners_test_str_SOURCES = \
    tests/datastruct/test_str.c \
    src/datastruct/datastruct.h

nodist_tests_runners_test_str_SOURCES = tests/runners/runner_test_str.c

tests/datastruct/runners_test_str-test_str.$(OBJEXT): \
    tests/runners/runner_test_str.c \
    libcmock.la \
    libdatastruct.la

CLEANFILES += tests/runners/runner_test_str.c

tests_runners_test_str_LDADD = \
    libcmock.la \
    libdatastruct.la

tests_runners_test_str_CPPFLAGS = \
    $(CMOCK_CPPFLAGS) \
    $(AM_CPPFLAGS)

check_PROGRAMS += tests/runners/test_mem

tests/runners/runner_test_mem.c: ./tests/datastruct/test_mem.c
	@test -n "$(RUBY)" || { echo "\nPlease install Ruby to run tests.\n"; exit 1; }
	mkdir -p tests/runners
	$(RUBY) $(top_srcdir)/third-party/CMock/vendor/unity/auto/generate_test_runner.rb $< $@

tests_runners_test_mem_SOURCES = \
    tests/datastruct/test_mem.c \
    src/datastruct/datastruct.h

nodist_tests_runners_test_mem_SOURCES = tests/runners/runner_test_mem.c

tests/datastruct/runners_test_mem-test_mem.$(OBJEXT): \
    tests/runners/runner_test_mem.c \
    libcmock.la \
    libdatastruct.la

CLEANFILES += tests/runners/runner_test_mem.c

tests_runners_test_mem_LDADD = \
    libcmock.la \
    libdatastruct.la

tests_runners_test_mem_CPPFLAGS = \
    $(CMOCK_CPPFLAGS) \
    $(AM_CPPFLAGS)


### m65tool

bin_PROGRAMS += m65tool

m65tool_SOURCES = ./src/m65tool/m65tool.c

m65tool_LDADD = libdatastruct.la


TESTS = $(check_PROGRAMS)

EXTRA_DIST = \
    README.md \
    third-party/CMock/LICENSE.txt \
    third-party/CMock/README.md \
    third-party/CMock/config \
    third-party/CMock/lib \
    third-party/CMock/scripts \
    third-party/CMock/vendor/unity/LICENSE.txt \
    third-party/CMock/vendor/unity/README.md \
    third-party/CMock/vendor/unity/auto

# if CODE_COVERAGE_ENABLED
include $(top_srcdir)/aminclude_static.am
CODE_COVERAGE_DIRECTORY = src tests
# endif # CODE_COVERAGE_ENABLED

# project.mk gets appended to Makefile.am by scripts/makemake.py. It can
# contain additional Automake definitions, as well as Makefile rules in
# Automake-compatible syntax.
#
# The generated Makefile.am creates these Automake list variables, which can be
# extended by project.mk with the += operator:
#
# ACLOCAL_AMFLAGS +=
# AM_CPPFLAGS +=
# AM_LDFLAGS +=
# bin_PROGRAMS +=
# noinst_LTLIBRARIES +=
# check_PROGRAMS +=
# check_LTLIBRARIES +=
# CLEANFILES +=
# BUILT_SOURCES +=
# TESTS +=
# EXTRA_DIST +=

clean-local: code-coverage-clean
distclean-local: code-coverage-dist-clean

